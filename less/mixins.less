

//====================================
//              FOR LOOP             =
//====================================
.for(@i, @n) {
    .-each(@i)
  }

  .for(@n) when (isnumber(@n)) {
    .for(1, @n)
  }

  .for(@i, @n) when not (@i =@n) {
    .for((@i + (@n - @i) / abs(@n - @i)), @n);
  }
  //--------  End of for loop  ---------//



  //=========================================
  //              FOR EACH LOOP             =
  //=========================================
  .for(@array) when (default()) {
    .for-impl_(length(@array))
  }

  .for-impl_(@i) when (@i > 1) {
    .for-impl_((@i - 1))
  }

  .for-impl_(@i) when (@i > 0) {
    .-each(extract(@array, @i))
  }
  //--------  End of for each loop  ---------//




// Setting up the palette colors
@palette1: #fbd33a;
@palette2: #112346;
@palette3: #0f2346;
@palette4: #303030;
@palette5: #ffffff;

.palette(@color) {
  &-bg    {background-color:    @color}
  &-b     {border-color:        @color}
  &-b-t   {border-top-color:    @color}
  &-b-r   {border-right-color:  @color}
  &-b-l   {border-left-color:   @color}
  &-b-b   {border-bottom-color: @color}
  &-t     {color:               @color}
}


.generate-colors(@n, @i:1) when (@i =< @n) {
  // e("") escapes the "
  @color: e("palette@{i}");
  .palette@{i}{
    //@@ uses the variable value as the variable name
    .palette(@@color);
  }
  .generate-colors(@n, (@i + 1));
}

.generate-colors(5);







// padding, margin helper class
@screen-xxs: 0px;
@screen-xl: 1600px;
@values-array: 0, 5, 10, 15, 20, 30, 40, 50, 60, 75, 100, 150, 200;

  .make-space(@prefix) {
    .for(@values-array);
    .-each(@value) {
      .@{prefix}-p-@{value}   { padding:        ~"@{value}px"; }
      .@{prefix}-pt-@{value}  { padding-top:    ~"@{value}px"; }
      .@{prefix}-pl-@{value}  { padding-left:   ~"@{value}px"; }
      .@{prefix}-pr-@{value}  { padding-right:  ~"@{value}px"; }
      .@{prefix}-pb-@{value}  { padding-bottom: ~"@{value}px"; }
      .@{prefix}-m-@{value}   { margin:         ~"@{value}px"; }
      .@{prefix}-mt-@{value}  { margin-top:     ~"@{value}px"; }
      .@{prefix}-ml-@{value}  { margin-left:    ~"@{value}px"; }
      .@{prefix}-mr-@{value}  { margin-right:   ~"@{value}px"; }
      .@{prefix}-mb-@{value}  { margin-bottom:  ~"@{value}px"; }
    }
  }



// line-heigth helper class
@lh-val-array: 1, 1.5, 2, 2.5, 3, 4;

.make-lh (@index, @prefix) when (@index > 0) {
  .@{prefix}-lh-@{index}   { line-height: extract(@lh-val-array, @index); }
  .make-lh((@index - 1), @prefix);
}

// font-size helper class
@fs-val-array: 1, 1.5, 2, 2.5, 2.75, 3, 3.25, 3.75, 4, 5;

.make-fs (@index, @prefix) when (@index > 0) {
  .@{prefix}-fs-@{index}   { font-size: floor((@font-size-base * extract(@fs-val-array, @index))); }
  .make-fs((@index - 1), @prefix);
}


@media (min-width: @screen-xxs) {
  .make-lh(length(@lh-val-array), @prefix: xxs);
  .make-fs(length(@fs-val-array), @prefix: xxs);
  .make-space(@prefix: xxs);
}

@media (min-width: @screen-xs-min) {
  .make-lh(length(@lh-val-array), @prefix: xs);
  .make-fs(length(@fs-val-array), @prefix: xs);
  .make-space(@prefix: xs);
}

@media (min-width: @screen-sm-min) {
  .make-lh(length(@lh-val-array), @prefix: sm);
  .make-fs(length(@fs-val-array), @prefix: sm);
  .make-space(@prefix: sm);
}

@media (min-width: @screen-md-min) {
  .make-lh(length(@lh-val-array), @prefix: md);
  .make-fs(length(@fs-val-array), @prefix: md);
  .make-space(@prefix: md);
}

@media (min-width: @screen-lg-min) {
  .make-lh(length(@lh-val-array), @prefix: lg);
  .make-fs(length(@fs-val-array), @prefix: lg);
  .make-space(@prefix: lg);
}

@media (min-width: @screen-xl) {
  .make-lh(length(@lh-val-array), @prefix: xl);
  .make-fs(length(@fs-val-array), @prefix: xl);
  .make-space(@prefix: xl);
}
